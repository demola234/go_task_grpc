// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/demola234/todogrpc/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/demola234/todogrpc/db/sqlc"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateTasks mocks base method.
func (m *MockStore) CreateTasks(arg0 context.Context, arg1 db.CreateTasksParams) (db.Tasks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTasks", arg0, arg1)
	ret0, _ := ret[0].(db.Tasks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTasks indicates an expected call of CreateTasks.
func (mr *MockStoreMockRecorder) CreateTasks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTasks", reflect.TypeOf((*MockStore)(nil).CreateTasks), arg0, arg1)
}

// DeleteTasks mocks base method.
func (m *MockStore) DeleteTasks(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTasks", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTasks indicates an expected call of DeleteTasks.
func (mr *MockStoreMockRecorder) DeleteTasks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTasks", reflect.TypeOf((*MockStore)(nil).DeleteTasks), arg0, arg1)
}

// GetTask mocks base method.
func (m *MockStore) GetTask(arg0 context.Context, arg1 int64) (db.Tasks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", arg0, arg1)
	ret0, _ := ret[0].(db.Tasks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask.
func (mr *MockStoreMockRecorder) GetTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockStore)(nil).GetTask), arg0, arg1)
}

// ListTasks mocks base method.
func (m *MockStore) ListTasks(arg0 context.Context) ([]db.Tasks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTasks", arg0)
	ret0, _ := ret[0].([]db.Tasks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTasks indicates an expected call of ListTasks.
func (mr *MockStoreMockRecorder) ListTasks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTasks", reflect.TypeOf((*MockStore)(nil).ListTasks), arg0)
}

// ListTasksByCategory mocks base method.
func (m *MockStore) ListTasksByCategory(arg0 context.Context, arg1 db.ListTasksByCategoryParams) ([]db.Tasks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTasksByCategory", arg0, arg1)
	ret0, _ := ret[0].([]db.Tasks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTasksByCategory indicates an expected call of ListTasksByCategory.
func (mr *MockStoreMockRecorder) ListTasksByCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTasksByCategory", reflect.TypeOf((*MockStore)(nil).ListTasksByCategory), arg0, arg1)
}

// UpdateTasks mocks base method.
func (m *MockStore) UpdateTasks(arg0 context.Context, arg1 db.UpdateTasksParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTasks", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTasks indicates an expected call of UpdateTasks.
func (mr *MockStoreMockRecorder) UpdateTasks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTasks", reflect.TypeOf((*MockStore)(nil).UpdateTasks), arg0, arg1)
}
